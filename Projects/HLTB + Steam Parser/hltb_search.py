import logging
import asyncio
from howlongtobeatpy import HowLongToBeat
from rapidfuzz import fuzz
from aliases import CUSTOM_IDS
from search_utils import normalize_title

logger = logging.getLogger(__name__)

async def search_hltb(original_title: str):
    hltb = HowLongToBeat()
    try:
        normalized_query = normalize_title(original_title)

        # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        results = await asyncio.to_thread(hltb.search, normalized_query)

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if not results:
            logger.info(f"üîÑ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é: '{normalized_query}', –ø—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ: '{original_title}'")
            results = await asyncio.to_thread(hltb.search, original_title)

        if not results:
            logger.info(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏—á–µ–≥–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: '{original_title}'")
            return None

        for result in results:
            if normalize_title(result.game_name) == normalized_query:
                logger.info(f"‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{result.game_name}'")
                return result

        best_match = max(results, key=lambda r: fuzz.ratio(normalize_title(r.game_name), normalized_query))
        best_score = fuzz.ratio(normalize_title(best_match.game_name), normalized_query)

        logger.debug(f"ü§î Fuzzy match –¥–ª—è '{original_title}': '{best_match.game_name}' —Å –ø–æ—Ö–æ–∂–µ—Å—Ç—å—é {best_score}")

        if best_score >= 85:
            return best_match

        return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–∞ HowLongToBeat: {e}")
        return None

async def smart_search(original_title: str):
    # –≠—Ç–∞–ø 0 ‚Äî –ü–æ–∏—Å–∫ –ø–æ ID, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ
    if original_title in CUSTOM_IDS:
        try:
            result = await HowLongToBeat().async_search_from_id(CUSTOM_IDS[original_title])
            if result:
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ ID –¥–ª—è '{original_title}'")
                return result
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ ID –¥–ª—è '{original_title}': {e}")

    # –≠—Ç–∞–ø 1 ‚Äî –ü—Ä—è–º–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å —Ç–æ—á–Ω—ã–º –∏ fuzzy —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
    result = await search_hltb(original_title)
    if result:
        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ '{original_title}' —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫")
        return result

    logger.warning(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {original_title}")
    return None
